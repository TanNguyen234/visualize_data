import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import numpy as np
import io
import os

# --- 1. C·∫§U H√åNH TRANG V√Ä TI√äU ƒê·ªÄ ---
st.set_page_config(
    page_title="Ph√¢n t√≠ch LST, NDVI, TVDI",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("üå°Ô∏è C√¥ng c·ª• Tr·ª±c quan h√≥a D·ªØ li·ªáu M√¥i tr∆∞·ªùng")
st.markdown(
    "S·ª≠ d·ª•ng **LST** (Land Surface Temperature), **NDVI** (Normalized Difference Vegetation Index) v√† **TVDI** (Temperature Vegetation Dryness Index) ƒë·ªÉ ph√¢n t√≠ch.")


# --- 2. T·∫¢I V√Ä X·ª¨ L√ù D·ªÆ LI·ªÜU BAN ƒê·∫¶U ---

# H√†m ƒë·ªçc v√† chu·∫©n h√≥a d·ªØ li·ªáu
@st.cache_data
def load_and_preprocess_data(uploaded_file):
    """ƒê·ªçc, chu·∫©n h√≥a, v√† t√≠nh to√°n c√°c gi√° tr·ªã trung b√¨nh."""
    try:
        if uploaded_file.name.endswith(('.xls', '.xlsx', '.xlsm')):
            df = pd.read_excel(uploaded_file)
        elif uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file, encoding='utf-8')
        else:
            st.error("Ch·ªâ h·ªó tr·ª£ file Excel (.xlsx, .xlsm, .xls) ho·∫∑c CSV (.csv).")
            return None

        df.columns = df.columns.str.strip().str.upper()

        required_cols = ['POINT_X', 'POINT_Y', 'WARD', 'DATE', 'LST', 'NDVI', 'TVDI']
        if not all(col in df.columns for col in required_cols):
            missing_cols = [col for col in required_cols if col not in df.columns]
            st.error(f"File thi·∫øu c√°c c·ªôt b·∫Øt bu·ªôc sau: {', '.join(missing_cols)}")
            return None

        # X·ª≠ l√Ω ƒë·ªãnh d·∫°ng ng√†y th√°ng dd/mm/yyyy b·∫±ng dayfirst=True
        df['DATE'] = pd.to_datetime(df['DATE'], errors='coerce', dayfirst=True)
        df.dropna(subset=['DATE', 'LST', 'NDVI', 'TVDI', 'WARD'], inplace=True)

        df['MONTH'] = df['DATE'].dt.month

        return df

    except Exception as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω file: {e}")
        return None


# H√†m t·∫°o t√™n file cho bi·ªÉu ƒë·ªì
def generate_filename(chart_name, selected_wards, selected_months):
    ward_str = "_".join(selected_wards)[:30].replace(' ', '-')
    month_str = "_".join(map(str, selected_months))
    chart_abbr = chart_name.split(':')[0].replace(' ', '_').replace('/', '').replace(',', '')
    return f"{chart_abbr}_W{ward_str}_M{month_str}.png"


# N√∫t t·∫£i file
uploaded_file = st.file_uploader(
    "üì§ **B∆∞·ªõc 1: T·∫£i file d·ªØ li·ªáu (.xlsm, .xlsx, .csv)**",
    type=["xlsm", "xlsx", "csv"],
    help="File ph·∫£i c√≥ c√°c c·ªôt: POINT_X, POINT_Y, WARD, DATE, LST, NDVI, TVDI. ƒê·ªãnh d·∫°ng ng√†y th√°ng ph·∫£i l√† dd/mm/yyyy."
)

if uploaded_file:
    df_raw = load_and_preprocess_data(uploaded_file)

    if df_raw is not None and not df_raw.empty:
        st.success(f"T·∫£i th√†nh c√¥ng! T·ªïng s·ªë d√≤ng: {len(df_raw)}")

        # --- 3. B·∫¢NG ƒêI·ªÄU KHI·ªÇN (SIDEBAR) ---
        st.sidebar.header("‚öôÔ∏è B·ªô l·ªçc D·ªØ li·ªáu")

        all_months = sorted(df_raw['MONTH'].unique())
        all_wards = sorted(df_raw['WARD'].unique())

        selected_months = st.sidebar.multiselect(
            "**B∆∞·ªõc 2: Ch·ªçn Th√°ng**",
            options=all_months,
            default=all_months,
            format_func=lambda x: f"Th√°ng {x}"
        )

        selected_wards = st.sidebar.multiselect(
            "**B∆∞·ªõc 3: Ch·ªçn Qu·∫≠n/Ph∆∞·ªùng (WARD)**",
            options=all_wards,
            default=all_wards
        )

        chart_options = {
            "Scatter: LST vs NDVI": "scatter_lst_ndvi",
            "Boxplot: Ph√¢n b·ªë LST theo Ward": "boxplot_lst_ward",
            "Heatmap: T∆∞∆°ng quan LST/NDVI/TVDI": "heatmap_corr",
            "Combined: LST, NDVI, TVDI theo Ward (Bar & Line)": "combined_chart",
            "Linear Regression: LST vs NDVI": "regplot_lst_ndvi",
            "Scatter: TVDI vs LST": "scatter_tvdi_lst"
        }

        st.sidebar.header("üìä Lo·∫°i Bi·ªÉu ƒë·ªì")
        chart_choice_name = st.sidebar.selectbox(
            "**B∆∞·ªõc 4: Ch·ªçn Bi·ªÉu ƒë·ªì ƒë·ªÉ v·∫Ω**",
            options=list(chart_options.keys())
        )
        chart_choice_key = chart_options[chart_choice_name]

        # N√∫t v·∫Ω bi·ªÉu ƒë·ªì
        if st.sidebar.button("üé® **V·∫Ω Bi·ªÉu ƒë·ªì**"):

            # --- 4. √ÅP D·ª§NG B·ªò L·ªåC ---
            df_filtered = df_raw[
                (df_raw['MONTH'].isin(selected_months)) &
                (df_raw['WARD'].isin(selected_wards))
                ]

            if df_filtered.empty:
                st.error("Kh√¥ng c√≥ d·ªØ li·ªáu n√†o kh·ªõp v·ªõi b·ªô l·ªçc ƒë√£ ch·ªçn.")
            else:

                # --- S·ª¨A L·ªñI T√äN BI·ªÇU ƒê·ªí D√ÄI V√Ä TH√îNG TIN B·ªò L·ªåC ---
                base_title = chart_choice_name.split(':')[0]

                st.subheader(f"Bi·ªÉu ƒë·ªì: {base_title}")
                st.info(
                    f"D·ªØ li·ªáu ƒë∆∞·ª£c l·ªçc: {len(df_filtered)} ƒëi·ªÉm. (Ward: {', '.join(selected_wards)}, Th√°ng: {', '.join(map(str, selected_months))})")

                avg_by_ward = df_filtered.groupby('WARD')[['LST', 'NDVI', 'TVDI']].mean().reset_index()

                # --- 5. V·∫º BI·ªÇU ƒê·ªí V√Ä X·ª¨ L√ù T·∫¢I XU·ªêNG ---

                plot_data = None
                mime_type = "image/png"

                if chart_choice_key == "scatter_lst_ndvi":
                    fig = px.scatter(
                        df_filtered, x="NDVI", y="LST", color="WARD",
                        title=f"1Ô∏è‚É£ {base_title} theo Ward",
                        hover_data={'DATE': True, 'POINT_X': True, 'POINT_Y': True}
                    )
                    st.plotly_chart(fig, use_container_width=True)
                    # FIX: B·ªè fig.to_image() ƒë·ªÉ tr√°nh l·ªói Kaleido tr√™n Streamlit Cloud
                    st.markdown("**(üí° Di chu·ªôt l√™n g√≥c tr√™n ph·∫£i bi·ªÉu ƒë·ªì ƒë·ªÉ t·∫£i ·∫£nh PNG)**")

                elif chart_choice_key == "boxplot_lst_ward":
                    lst_mean_filtered = df_filtered.groupby('WARD')['LST'].mean().sort_values(ascending=False).head(
                        6).index
                    df_sample = df_filtered[df_filtered['WARD'].isin(lst_mean_filtered)]

                    if df_sample.empty:
                        st.warning("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ v·∫Ω Boxplot cho 6 Ward c√≥ LST cao nh·∫•t.")
                    else:
                        fig = px.box(
                            df_sample, x="WARD", y="LST", color="WARD",
                            title=f"2Ô∏è‚É£ Ph√¢n b·ªë LST c·ªßa 6 Ward c√≥ LST TB cao nh·∫•t",
                            height=600
                        )
                        st.plotly_chart(fig, use_container_width=True)
                        # FIX: B·ªè fig.to_image()
                        st.markdown("**(üí° Di chu·ªôt l√™n g√≥c tr√™n ph·∫£i bi·ªÉu ƒë·ªì ƒë·ªÉ t·∫£i ·∫£nh PNG)**")

                elif chart_choice_key == "heatmap_corr":
                    corr = df_filtered[['LST', 'NDVI', 'TVDI']].corr()
                    fig = px.imshow(
                        corr, text_auto=True, aspect="auto",
                        color_continuous_scale='RdBu_r',
                        title=f"3Ô∏è‚É£ Ma tr·∫≠n T∆∞∆°ng quan LST, NDVI, TVDI"
                    )
                    st.plotly_chart(fig, use_container_width=True)
                    # FIX: B·ªè fig.to_image()
                    st.markdown("**(üí° Di chu·ªôt l√™n g√≥c tr√™n ph·∫£i bi·ªÉu ƒë·ªì ƒë·ªÉ t·∫£i ·∫£nh PNG)**")

                elif chart_choice_key == "combined_chart":
                    if avg_by_ward.empty:
                        st.warning("Kh√¥ng ƒë·ªß d·ªØ li·ªáu trung b√¨nh ƒë·ªÉ v·∫Ω Combined Chart.")
                    else:
                        # Bi·ªÉu ƒë·ªì Matplotlib (s·ª≠ d·ª•ng st.download_button)
                        mpl_fig, ax1 = plt.subplots(figsize=(10, 6))

                        color_bar = '#3b82f6'
                        color_line1 = '#ef4444'
                        color_line2 = '#22c55e'

                        ax1.bar(avg_by_ward['WARD'], avg_by_ward['LST'], color=color_bar, alpha=0.7,
                                label='Mean LST (¬∞C)')
                        ax1.set_xlabel("Ward")
                        ax1.set_ylabel("Mean LST (¬∞C)", color=color_bar)
                        ax1.tick_params(axis='y', labelcolor=color_bar)
                        ax1.tick_params(axis='x', rotation=45)

                        ax2 = ax1.twinx()
                        ax2.plot(avg_by_ward['WARD'], avg_by_ward['NDVI'], color=color_line1, marker='o', linewidth=2,
                                 label='Mean NDVI')
                        ax2.plot(avg_by_ward['WARD'], avg_by_ward['TVDI'], color=color_line2, marker='s', linewidth=2,
                                 linestyle='--', label='Mean TVDI')
                        ax2.set_ylabel("NDVI / TVDI", color='black')
                        ax2.tick_params(axis='y', labelcolor='black')

                        lines1, labels1 = ax1.get_legend_handles_labels()
                        lines2, labels2 = ax2.get_legend_handles_labels()
                        ax1.legend(lines1 + lines2, labels1 + labels2, loc='upper right')
                        ax1.set_title(f"4Ô∏è‚É£ {base_title} theo Ward")

                        plt.tight_layout()
                        st.pyplot(mpl_fig)

                        # Xu·∫•t ·∫£nh ra buffer ƒë·ªÉ t·∫£i xu·ªëng
                        buf = io.BytesIO()
                        mpl_fig.savefig(buf, format="png", dpi=300)
                        plt.close(mpl_fig)

                        plot_data = buf.getvalue() # Ch·ªâ g√°n plot_data cho Matplotlib

                elif chart_choice_key == "regplot_lst_ndvi":
                    fig = px.scatter(
                        df_filtered, x="NDVI", y="LST",
                        trendline="ols", color="WARD",
                        title=f"5Ô∏è‚É£ {base_title}: LST vs NDVI",
                        hover_data={'DATE': True}
                    )
                    st.plotly_chart(fig, use_container_width=True)
                    # FIX: B·ªè fig.to_image()
                    st.markdown("**(üí° Di chu·ªôt l√™n g√≥c tr√™n ph·∫£i bi·ªÉu ƒë·ªì ƒë·ªÉ t·∫£i ·∫£nh PNG)**")

                elif chart_choice_key == "scatter_tvdi_lst":
                    fig = px.scatter(
                        df_filtered, x="TVDI", y="LST", color="WARD",
                        title=f"6Ô∏è‚É£ {base_title} theo Ward",
                        hover_data={'DATE': True, 'POINT_X': True, 'POINT_Y': True}
                    )
                    st.plotly_chart(fig, use_container_width=True)
                    # FIX: B·ªè fig.to_image()
                    st.markdown("**(üí° Di chu·ªôt l√™n g√≥c tr√™n ph·∫£i bi·ªÉu ƒë·ªì ƒë·ªÉ t·∫£i ·∫£nh PNG)**")

                # --- N√öT T·∫¢I XU·ªêNG CHUNG (CH·ªà D√ôNG CHO MATPLOTLIB) ---
                if plot_data is not None:
                    # N√∫t n√†y ch·ªâ xu·∫•t hi·ªán khi Combined Chart (Matplotlib) ƒë∆∞·ª£c ch·ªçn
                    st.download_button(
                        label="üì• T·∫£i xu·ªëng Bi·ªÉu ƒë·ªì (PNG)",
                        data=plot_data,
                        file_name=generate_filename(chart_choice_name, selected_wards, selected_months),
                        mime=mime_type
                    )


    elif uploaded_file and (df_raw is None or df_raw.empty):
        st.warning("Vui l√≤ng t·∫£i l√™n m·ªôt file h·ª£p l·ªá v√† ƒë·∫£m b·∫£o file kh√¥ng tr·ªëng.")

else:
    st.info("üí° B·∫Øt ƒë·∫ßu b·∫±ng c√°ch t·∫£i l√™n file d·ªØ li·ªáu (.xlsm, .xlsx, ho·∫∑c .csv) c·ªßa b·∫°n.")